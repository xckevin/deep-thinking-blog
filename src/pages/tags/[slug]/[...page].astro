---
import type { GetStaticPathsOptions, Page } from "astro";
import { type CollectionEntry, getCollection } from "astro:content";
import BaseLayout from "../../../layouts/BaseLayout.astro";
import Pagination from "../../../components/Pagination.astro";
import PostPreview from "../../../components/PostPreview.astro";
import Subscribe from "../../../components/Subscribe.astro";
import siteConfig from "../../../data/site-config";
import {
  sortItemsByDateDesc,
  getAllTags,
  getPostsByTag,
} from "../../../utils/data-utils";

export type PostWrapper = {
  _type: "blog" | "course" | "speech";
  p: CollectionEntry<"blog" | "course" | "speeches">;
  data: any;
};

export async function getAllPosts() {
  const allBlog: PostWrapper[] = (await getCollection("blog")).map((entry) => {
    return {
      _type: "blog",
      p: entry,
      data: entry.data,
    };
  });
  const allSpeech: PostWrapper[] = (await getCollection("speeches")).map(
    (entry) => {
      return {
        _type: "speech",
        p: entry,
        data: entry.data,
      };
    }
  );
  const allCourses: PostWrapper[] = (await getCollection("course")).map(
    (entry) => {
      return {
        _type: "course",
        p: entry,
        data: entry.data,
      };
    }
  );

  const allPosts: PostWrapper[] = [...allBlog, ...allSpeech, ...allCourses];
  return allPosts;
}

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const allPosts = await getAllPosts();
  const posts = allPosts.sort(sortItemsByDateDesc);
  const tags = getAllTags(posts);

  return tags.flatMap((tag) => {
    const filteredPosts = getPostsByTag(posts, tag.slug);
    return paginate(filteredPosts, {
      params: { slug: tag.slug },
      pageSize: siteConfig.postsPerPage || 4,
    });
  });
}

type Props = {
  page: Page<PostWrapper>;
};

const { page } = Astro.props;
const blog = page.data;
const params = Astro.params;
const allPosts = await getAllPosts();
const allTags = getAllTags(allPosts);
const currentTag = allTags.find((tag) => {
  return tag.slug === params.slug;
});
---

<BaseLayout
  title={`Posts Tagged ${currentTag?.name}`}
  description={`Explore a curated collection of blog posts under ${currentTag?.name}`}
  image={{ src: "/dante-preview.jpg", alt: "The preview of the site" }}
  showHeader={false}
>
  <h1
    class="mb-12 text-2xl leading-tight font-serif italic sm:mb-16 sm:text-4xl"
  >
    Posts Tagged "{currentTag?.name}"
  </h1>
  {
    blog.map((post) => (
      <PostPreview _type={post._type} post={post.p} class="mb-10 sm:mb-12" />
    ))
  }
  <Pagination page={page} class="my-16 sm:my-24" />
  <Subscribe class="my-16 sm:my-24" />
</BaseLayout>
